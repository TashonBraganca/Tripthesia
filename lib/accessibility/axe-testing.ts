"use client";

import { axe, AxeResults } from 'axe-core';

/**
 * Automated Accessibility Testing Utility
 * Uses axe-core for comprehensive WCAG 2.1 compliance testing
 */

export interface AccessibilityTestResult {
  passes: number;
  violations: number;
  incomplete: number;
  inaccessible: number;
  details: AxeResults;
  summary: string;
  score: number; // 0-100 accessibility score
}

export interface AccessibilityTestConfig {
  level: 'wcag2a' | 'wcag2aa' | 'wcag2aaa';
  includeRules?: string[];
  excludeRules?: string[];
  timeout?: number;
}

/**
 * Run accessibility tests on a DOM element or the entire page
 */
export async function runAccessibilityTest(
  element: Element | Document = document,
  config: AccessibilityTestConfig = { level: 'wcag2aa' }
): Promise<AccessibilityTestResult> {
  try {
    const axeConfig = {
      rules: {},
      tags: [config.level],
      timeout: config.timeout || 10000,
    };

    // Add custom rule inclusions/exclusions
    if (config.includeRules) {
      config.includeRules.forEach(rule => {
        axeConfig.rules[rule] = { enabled: true };
      });
    }
    
    if (config.excludeRules) {
      config.excludeRules.forEach(rule => {
        axeConfig.rules[rule] = { enabled: false };
      });
    }

    const results = await axe.run(element, axeConfig);
    
    const passes = results.passes.length;
    const violations = results.violations.length;
    const incomplete = results.incomplete.length;
    const inaccessible = results.inaccessible.length;
    
    const total = passes + violations + incomplete + inaccessible;
    const score = total > 0 ? Math.round((passes / total) * 100) : 100;
    
    const summary = `Accessibility Score: ${score}% | Passes: ${passes} | Violations: ${violations} | Incomplete: ${incomplete}`;
    
    return {
      passes,
      violations,
      incomplete,
      inaccessible,
      details: results,
      summary,
      score
    };
  } catch (error) {
    console.error('Accessibility testing failed:', error);
    throw new Error(`Accessibility testing failed: ${error.message}`);
  }
}

/**
 * Generate a detailed accessibility report
 */
export function generateAccessibilityReport(result: AccessibilityTestResult): string {
  let report = `# Accessibility Test Report\n\n`;
  report += `**Overall Score: ${result.score}%**\n\n`;
  report += `## Summary\n`;
  report += `- ‚úÖ Passes: ${result.passes}\n`;
  report += `- ‚ùå Violations: ${result.violations}\n`;
  report += `- ‚ö†Ô∏è Incomplete: ${result.incomplete}\n`;
  report += `- üö´ Inaccessible: ${result.inaccessible}\n\n`;

  if (result.violations > 0) {
    report += `## Violations\n`;
    result.details.violations.forEach((violation, index) => {
      report += `### ${index + 1}. ${violation.description}\n`;
      report += `- **Impact:** ${violation.impact}\n`;
      report += `- **Help:** ${violation.helpUrl}\n`;
      report += `- **Elements:** ${violation.nodes.length}\n\n`;
    });
  }

  if (result.incomplete.length > 0) {
    report += `## Items Needing Review\n`;
    result.details.incomplete.forEach((item, index) => {
      report += `### ${index + 1}. ${item.description}\n`;
      report += `- **Help:** ${item.helpUrl}\n`;
      report += `- **Elements:** ${item.nodes.length}\n\n`;
    });
  }

  report += `\n---\nGenerated by Tripthesia Accessibility Testing System\n`;
  return report;
}

/**
 * Component-specific accessibility testing
 */
export async function testComponentAccessibility(
  componentSelector: string,
  config?: AccessibilityTestConfig
): Promise<AccessibilityTestResult> {
  const element = document.querySelector(componentSelector);
  if (!element) {
    throw new Error(`Component not found: ${componentSelector}`);
  }
  
  return runAccessibilityTest(element, config);
}

/**
 * Batch test multiple components
 */
export async function testMultipleComponents(
  selectors: string[],
  config?: AccessibilityTestConfig
): Promise<{ [selector: string]: AccessibilityTestResult }> {
  const results: { [selector: string]: AccessibilityTestResult } = {};
  
  for (const selector of selectors) {
    try {
      results[selector] = await testComponentAccessibility(selector, config);
    } catch (error) {
      console.error(`Failed to test ${selector}:`, error);
      results[selector] = {
        passes: 0,
        violations: 1,
        incomplete: 0,
        inaccessible: 0,
        details: null as any,
        summary: `Error: ${error.message}`,
        score: 0
      };
    }
  }
  
  return results;
}

/**
 * Development helper: Log accessibility results to console
 */
export function logAccessibilityResults(result: AccessibilityTestResult, componentName?: string): void {
  const prefix = componentName ? `[${componentName}]` : '[Accessibility Test]';
  
  console.group(`üîç ${prefix} Accessibility Results`);
  console.log(`Score: ${result.score}%`);
  console.log(`Summary: ${result.summary}`);
  
  if (result.violations > 0) {
    console.warn(`‚ùå ${result.violations} violations found:`);
    result.details.violations.forEach((violation, index) => {
      console.warn(`${index + 1}. ${violation.description}`);
      console.warn(`   Impact: ${violation.impact}`);
      console.warn(`   Help: ${violation.helpUrl}`);
    });
  }
  
  if (result.incomplete > 0) {
    console.info(`‚ö†Ô∏è ${result.incomplete} items need manual review`);
  }
  
  console.groupEnd();
}

export default {
  runAccessibilityTest,
  generateAccessibilityReport,
  testComponentAccessibility,
  testMultipleComponents,
  logAccessibilityResults
};