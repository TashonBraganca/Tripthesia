import { createEvents, EventAttributes } from "ics";

interface ExportOptions {
  includePricing: boolean;
  includeMap: boolean;
  includeActivities: boolean;
  includeNotes: boolean;
  timezone: string;
}

export function generateICS(
  tripData: any,
  itineraryData: any,
  options: ExportOptions
): string {
  const events: EventAttributes[] = [];

  if (!itineraryData.days) {
    const { error, value } = createEvents(events);
    if (error) {
      throw new Error(`ICS generation error: ${error.message}`);
    }
    return value || "";
  }

  // Process each day and activity
  for (const day of itineraryData.days) {
    for (const activity of day.activities) {
      const startDateTime = parseDateTime(day.date, activity.timeSlot.start);
      const endDateTime = parseDateTime(day.date, activity.timeSlot.end);
      
      let description = [];
      
      if (activity.description) {
        description.push(activity.description);
      }
      
      if (activity.location?.name) {
        description.push(`Location: ${activity.location.name}`);
      }
      
      if (activity.location?.address) {
        description.push(`Address: ${activity.location.address}`);
      }
      
      if (options.includePricing && activity.cost?.amount > 0) {
        description.push(`Cost: ${activity.cost.currency} ${activity.cost.amount} (${activity.cost.priceRange})`);
      }
      
      if (activity.rating) {
        description.push(`Rating: ${activity.rating}/5 stars`);
      }
      
      if (activity.category) {
        description.push(`Category: ${activity.category}`);
      }
      
      description.push('\n--\nGenerated by Tripthesia');
      
      const event: EventAttributes = {
        uid: `${activity.id}@tripthesia.com`,
        title: activity.name,
        description: description.join('\n\n'),
        start: formatDateTimeForICS(startDateTime),
        end: formatDateTimeForICS(endDateTime),
        location: activity.location?.name || undefined,
        categories: activity.category ? [activity.category] : undefined,
        status: activity.isLocked ? 'CONFIRMED' : 'TENTATIVE',
        busyStatus: 'BUSY',
      };

      // Add geo coordinates if available
      if (activity.location?.coordinates) {
        event.geo = {
          lat: activity.location.coordinates.lat,
          lon: activity.location.coordinates.lng,
        };
      }
      
      events.push(event);
    }
  }

  // Add trip overview event (all-day for the entire trip duration)
  const tripStart = new Date(tripData.startDate);
  const tripEnd = new Date(tripData.endDate);
  tripEnd.setDate(tripEnd.getDate() + 1); // All-day events are exclusive end dates
  
  const tripOverview: EventAttributes = {
    uid: `trip-overview-${tripData.id}@tripthesia.com`,
    title: `🌍 ${tripData.title}`,
    description: buildTripDescription(tripData, itineraryData, options),
    start: [tripStart.getFullYear(), tripStart.getMonth() + 1, tripStart.getDate()],
    end: [tripEnd.getFullYear(), tripEnd.getMonth() + 1, tripEnd.getDate()],
    categories: ['Travel', 'Trip'],
    status: 'CONFIRMED',
    busyStatus: 'FREE',
  };
  
  if (tripData.destinations?.length > 0) {
    const destination = tripData.destinations[0];
    tripOverview.location = `${destination.city}, ${destination.country}`;
  }
  
  events.push(tripOverview);

  const { error, value } = createEvents(events);
  if (error) {
    throw new Error(`ICS generation error: ${error.message}`);
  }
  
  return value || "";
}

function parseDateTime(date: string, time: string): Date {
  const [year, month, day] = date.split('-').map(Number);
  const [hours, minutes] = time.split(':').map(Number);
  
  return new Date(year, month - 1, day, hours, minutes);
}

function formatDateTimeForICS(date: Date): [number, number, number, number, number] {
  return [
    date.getFullYear(),
    date.getMonth() + 1,
    date.getDate(),
    date.getHours(),
    date.getMinutes()
  ];
}

function buildTripDescription(tripData: any, itineraryData: any, options: ExportOptions): string {
  const description = [];
  
  if (itineraryData.summary) {
    description.push(itineraryData.summary);
  }
  
  if (tripData.destinations?.length > 0) {
    const destinations = tripData.destinations
      .map((d: any) => `${d.city}, ${d.country}`)
      .join(' • ');
    description.push(`\\nDestinations: ${destinations}`);
  }
  
  if (itineraryData.days?.length > 0) {
    description.push(`\\nDuration: ${itineraryData.days.length} days`);
    
    const totalActivities = itineraryData.days.reduce(
      (sum: number, day: any) => sum + (day.activities?.length || 0),
      0
    );
    description.push(`Activities: ${totalActivities} planned`);
  }
  
  if (options.includePricing) {
    const totalCost = calculateTotalCost(itineraryData);
    if (totalCost > 0) {
      description.push(`\\nEstimated Cost: ${itineraryData.currency || 'USD'} ${totalCost}`);
    }
  }
  
  description.push('\\n--\\nGenerated by Tripthesia - AI-powered travel planning');
  description.push('Visit: https://tripthesia.com');
  
  return description.join('');
}

function calculateTotalCost(itineraryData: any): number {
  if (!itineraryData.days) return 0;
  
  return itineraryData.days.reduce((total: number, day: any) => {
    return total + (day.activities?.reduce((dayTotal: number, activity: any) => {
      return dayTotal + (activity.cost?.amount || 0);
    }, 0) || 0);
  }, 0);
}